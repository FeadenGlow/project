.model tiny
.code
ORG 0100h

start:
    ; Читання параметрів командного рядка
    mov ah, 80h          ; виклик DOS-функції
    mov bx, 0            ; отримати адресу параметрів командного рядка
    int 21h              ; виклик DOS

    mov si, bx           ; si - покажчик на параметри командного рядка

    ; Отримання параметра підрядка
    mov di, offset substring ; di - покажчик на буфер для підрядка
    call read_string      ; читання рядка зі стандартного вводу
    call trim_newline     ; обрізання символу нового рядка

    ; Відкриття файлу для запису
    mov ah, 3Dh           ; відкриття файлу
    lea dx, filename      ; адреса назви файлу
    xor cx, cx            ; режим доступу (0 - запис)
    int 21h               ; виклик DOS
    mov [file_handle], ax ; зберегти дескриптор файлу

    ; Читання тексту для перевірки та вивід результатів у файл
read_text:
    mov di, offset text_buffer ; di - покажчик на буфер для тексту
    call read_string      ; читання рядка зі стандартного вводу
    jz  done              ; якщо кінець вводу, завершити програму

    ; Пошук входжень підрядка
    mov cx, 0             ; кількість входжень підрядка
    mov dx, di            ; dx - покажчик на поточний рядок
    call count_occurrences ; підрахунок входжень підрядка

    ; Виведення результатів у файл
    mov cx, ax            ; кількість входжень підрядка
    mov bx, line_counter  ; індекс рядка у текстовому файлі
    call print_number     ; виведення кількості входжень
    mov dx, offset result_buffer ; покажчик на буфер для результату
    mov ah, 40h           ; запис у файл
    int 21h               ; виклик DOS

    ; Читання наступного рядка або завершення програми
    jmp read_text

done:
    ; Закриття файлу
    mov bx, file_handle   ; дескриптор файлу
    mov ah, 3Eh           ; закриття файлу
    int 21h               ; виклик DOS

    ; Завершення програми
    mov ax, 4C00h         ; виклик DOS для завершення програми
    int 21h               ; виклик DOS

; Процедура читання рядка зі стандартного вводу
read_string:
    mov ah, 0Ah           ; DOS-функція для зчитування рядка
    int 21h               ; виклик DOS
    ret

; Процедура обрізання символу нового рядка з кінця рядка
trim_newline:
    mov bx, di             ; bx - покажчик на початок рядка
    add bx, 1              ; пропустити довжину рядка
    add bx, [di]           ; пропустити довжину рядка
    mov byte ptr [bx], 0Dh ; заміна символу нового рядка на null-термінатор
    ret

; Процедура підрахунку входжень підрядка в рядок
count_occurrences:
    ; Загальні регістри
    ; cx - кількість входжень підрядка
    ; dx - покажчик на поточний символ у рядку
    ; di - покажчик на підрядок
    ; si - покажчик на рядок
    ; al - поточний символ підрядка
    ; ah - поточний символ рядка
    ; bx - лічильник внутрішнього циклу
    mov cx, 0             ; кількість входжень підрядка
next_char:
    mov al, [di]          ; завантаження наступного символу підрядка
    mov ah, [si]          ; завантаження наступного символу рядка
    cmp al, 0             ; перевірка, чи кінець підрядка
    je end_of_substring   ; якщо так, завершення
    cmp ah, 0             ; перевірка, чи кінець рядка
    je end_of_string      ; якщо так, завершення
    cmp al, ah            ; порівняння поточних символів
    jne next_char         ; якщо не співпадають, перехід до наступного символу рядка
    inc di                ; збільшення покажчика підрядка
    inc dx                ; збільшення покажчика рядка
    jmp next_char         ; перехід до наступного символу
end_of_substring:
    inc cx                ; збільшення кількості входжень
end_of_string:

    ; Очищення буфера результату перед наступним підрахунком
    mov cx, 255
    mov di, offset result_buffer
    mov al, 0
    rep stosb

    ret

; Процедура сортування за допомогою bubble sort
bubble_sort:
    ; Параметри:
    ; cx - кількість елементів у масиві
    ; dx - покажчик на масив
    ; bx - тимчасовий регістр для обміну
next_pass:
    mov si, dx            ; завантаження адреси масива
    mov cx, word ptr [si] ; завантаження кількості елементів у масиві
    dec cx                ; зменшення кількості на 1
    cmp cx, 1             ; перевірка, чи кількість елементів більше 1
    jbe done_sorting      ; якщо ні, сортування завершено
next_comparison:
    mov bx, cx            ; завантаження кількості порівнянь для циклу
    mov di, si            ; завантаження покажчика на початок масива
inner_loop:
    mov ax, [di]          ; завантаження поточного елемента масива у регістр
    mov dx, di            ; збереження адреси поточного елемента
    add dx, 2             ; переміщення адреси на наступний елемент масива
    mov bx, [si]          ; завантаження наступного елемента масива у регістр
    cmp ax, bx            ; порівняння двох елементів масива
    jbe no_swap           ; якщо поточний елемент не більший за наступний, перехід
    mov [di], bx          ; обмін поточного та наступного елементів масива
    mov [si], ax          ; 
    mov ax, di            ; 
    add ax, 2             ; 
    mov di, ax            ; 
    dec bx                ; 
    jnz inner_loop        ; 
no_swap:
    inc si                ; 
    dec bx                ; 
    jnz inner_loop        ; 
    dec cx                ; 
    jnz next_comparison   ; 
done_sorting:
    ret

print_number:
    ; Параметри:
    ; cx - число для виведення
    ; bx - файловий дескриптор (не використовується)
    ; dx - покажчик на буфер (не використовується)
    ; ah - параметр виводу (не використовується)
    ; al - параметр виводу (не використовується)
    ; cx, dx, bx, ah, al - збереження регістрів (не використовується)
    push cx
    mov ah, 02h           ; функція для виводу символу
    mov dl, ' '           ; вивести пробіл
    int 21h               ; виклик DOS
    pop cx
    ret

filename db "test.res", 0 ; назва вихідного файлу
file_handle dw ?             ; дескриптор файлу
substring db 255 dup(?)      ; буфер для зберігання підрядка
text_buffer db 255 dup(?)    ; буфер для зберігання тексту
result_buffer db 255 dup(?)  ; буфер для зберігання результату
line_counter dw 0             ; лічильник рядків у файлі

end start

